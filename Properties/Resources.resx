<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="strCommLogListError" xml:space="preserve">
    <value>获取通讯日志失败，数据库句柄为空或没有日志信息</value>
  </data>
  <data name="strCOMStartError" xml:space="preserve">
    <value>串口启动失败</value>
  </data>
  <data name="strConnected" xml:space="preserve">
    <value>连接建立</value>
  </data>
  <data name="strConnectedAlarmContent" xml:space="preserve">
    <value>连接端口{0}，设备ID为{1}的客户已连接，连接时间为{2}</value>
  </data>
  <data name="strDatabaseConnectError" xml:space="preserve">
    <value>数据库连接失败</value>
  </data>
  <data name="strDeviceIDError" xml:space="preserve">
    <value>设备传入设备号为空</value>
  </data>
  <data name="strDisconnected" xml:space="preserve">
    <value>连接断开</value>
  </data>
  <data name="strDisconnectedAlarmContent" xml:space="preserve">
    <value>连接端口{0}，设备ID为{1}的客户已断开，断开时间为{2}</value>
  </data>
  <data name="strListCommStationEmpty" xml:space="preserve">
    <value>通讯列表为空，没有任何通讯被建立</value>
  </data>
  <data name="strListShowEmpty" xml:space="preserve">
    <value>显示列表为空，当前没有通讯被启动</value>
  </data>
  <data name="strListStationEmpty" xml:space="preserve">
    <value>站点表为空，没有要重置的信息</value>
  </data>
  <data name="strListUDPLinkerEmpty" xml:space="preserve">
    <value>站点信息表为空</value>
  </data>
  <data name="strNullParameterError" xml:space="preserve">
    <value>参数传入为null</value>
  </data>
  <data name="strPhoneListError" xml:space="preserve">
    <value>获取联系人电话失败，数据库句柄为空或者没有配置联系人</value>
  </data>
  <data name="strProtocalObjectError" xml:space="preserve">
    <value>携带ntrip协议的对象为null</value>
  </data>
  <data name="strReadTableFailure" xml:space="preserve">
    <value>读取表信息失败</value>
  </data>
  <data name="strRemark" xml:space="preserve">
    <value>多端口通讯模式，确保单个采集设备连接该端口</value>
  </data>
  <data name="strStationDisposeException" xml:space="preserve">
    <value>设备{0}在该时间点前曾异常终止！断电或别的原因导致?</value>
  </data>
  <data name="strStatusEventHandlerError" xml:space="preserve">
    <value>StatusEventHandler句柄为空，无法将底层信息返回给界面显示</value>
  </data>
  <data name="strTableNotExistError" xml:space="preserve">
    <value>获取表信息失败，可确认表是否存在</value>
  </data>
  <data name="strUDPDstConnected" xml:space="preserve">
    <value>数据端连接建立</value>
  </data>
  <data name="strUDPDstDisconnected" xml:space="preserve">
    <value>数据端连接断开</value>
  </data>
  <data name="strUDPSrcConnected" xml:space="preserve">
    <value>设备端连接建立</value>
  </data>
  <data name="strUDPSrcDisconnected" xml:space="preserve">
    <value>设备端连接断开</value>
  </data>
</root>